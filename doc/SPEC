== OJ Spec (0.1.0 Draft)
OJ is defined in terms of generators, modifiers, and query maps, each of which
is described below.

== Generators
Generators create partial SQL statements from a query map. They are
implemented as functions that process a query map and return a string.

== Modifiers
Modifiers manipulate and modify query maps. They are implemented as functions
that accept a query map, change it in some way, and return a new valid query map.

== Query Map
A query map is a Clojure map containing *at least two* of the following keys and
corresponding values:

  :table
    (Required, Keyword)
    The name of the table that the query acts upon.

---

  :select
    (Optional, Vector)
    The collection of column names to be selected from :table. If no :select
    is specified, the query will select all columns.

    If the column name is a list, it will be treated as an aggregate
    function: the first member will be the function, all the rest the
    parameters.

  :insert
    (Optional, IPersistentMap)
    A Clojure map of column names corresponding to desired values to insert into
    the :table.

  :update
    (Optional, IPersistentMap)
    A Clojure map of column names corresponding to desired values to update from
    a particular record in :table.

  :delete
    (Optional, Boolean)
    If truthy, signifies that you wish to delete a particular record from :table.
    If the value of :delete is the keyword :all, the :where key is not required.

The presence of each of these four keys may also require the presence of the
following keys:

  :where
    (IPersistentMap)
    Required For: (:update)
    Optional For: (:select, :delete)
    A Clojure map containing column names and the corresponding values with which
    to filter the table by. Values may be numbers, strings, vectors, or maps.

    If the value of an item in :where is a map, it contain only the following keys:
    [:< :<= :> :>= :not=]

    {:table :users
     :where {:age {:> 21 :< 18}}}
    SELECT * FROM users WHERE age > 21 AND age < 18

  :group
    (Vector)
    Optional For: (:select)
    A vector of SQL column names to group the query by.

  :order
    (Vector)
    Optional For: (:select)
    A vector of two elements. The first is the column name to order by, the
    second is the direction with which to list the results (:desc or :asc).

  :limit
    (Integer)
    Optional For: (:select)
    The number of results which to return from :table.

  :join
    (IPersistentMap)
    Optional For: (:select)
    Keys are the names of tables that you wish to join, and correspond to another
    map which relates a column of the join table with an identifying column on
    the query map's table.

    {:table :users
     :join {:items {:user_id :id}}}
    => SELECT id, email FROM users
    => SELECT * FROM items WHERE items.user_id = 1
    => SELECT * FROM items WHERE items.user_id = 2
